<!DOCTYPE html>
<html>
    <head>
        <title>Collaborative automata</title>
        <!-- <link href='http://fonts.googleapis.com/css?family=Questrial|Geo' rel='stylesheet' type='text/css'> -->
        <link rel='stylesheet' href='/stylesheets/style.css' />
        <link href="/stylesheets/jBox.css" rel="stylesheet">
    </head>
  
    <!-- Cell board -->
    <style>
        #life-board table {
            background-color: #2d2d2d;
            border-spacing: 0px;
            border: 1px solid #2c2c2c;
            margin: 0 auto;
        }
        #life-board tr, #life-board td {
            background: white;
            padding: 5px 5px;
            border: 1px solid #2c2c2c;
        }
        #board-container td.alive {
            background-color: black;
        }
        #cell-editor td.alive {
            background-color: dodgerblue;
        }
        #board-container td:hover {
            background-color: dodgerblue;
        }
        body {
            display: inline-block;
            position: absolute;
            left: 200px;
        }
        #array-container {
            /*width: 600px;
            height: 600px;
            overflow: scroll;*/
            font-family: monospace;
            font-size: 20px;
            line-height: 15px;
            letter-spacing: 4px;
        }
        #sidr {
            display: block;
            left: 0px;
            rigth: auto;
            position: fixed;
            width: 200px;
            background: #333;
            color: #fff;
            box-shadow: 0 0 5px 5px #222;
            text-align: center;
            float: left;
            top: 0;
            height: 100%;
        }
    </style>
    
    <body>
        <!-- The cell board goes here -->
        <div id='array-container'></div>
        
        <!-- The left panel goes here -->
        <div id="sidr" class="sidr left" style="display: block; left: 0px;">
            <div style='margin-bottom: 100px;'>
                <h1>ASCII automata</h1>
                <p>This is the ASCII aritificial life simulator, read the theory at [], the board is real-time collaborative, try playing other users sharing the link.</p>
                <p>@adelriosantiago</p>
            </div>
      
            
            <div id='life-board'>
                <h4>Drawing pattern:</h4>
                <table id='cell-editor'>
                    <% for(var y = 0; y < 9; y++) {%>
                        <tr>
                            <% for(var x = 0; x < 9; x++) {%>
                                <td cx='<%= x %>' cy='<%= y %>'></td>
                            <% } %>
                        </tr>
                    <% } %>
                </table>
            </div>
           
            <div id='user-room'>
                <h4>Your nickname: </h4><input id='nickname' type="text" placeholder='anonymous' style='width: 50%'/>
                <h4>Connected clients: <span id='stat-conn'>0</span></h4>
                <ul id='user-list' style='text-align: left;'></ul>

                <!-- <p>Living cells: </p>
                <p>Birth rate per second: </p>
                <p>Mortality rate per second: </p>
                <p>Deaths by solitude: </p>
                <p>Deaths by over-population: </p> ->>
                <!-- All time statistics -->
                <!-- <p>All time most living cells: </p>
                <p>Deaths by over-population: </p> -->
            </div>
            
            <!-- <button id='recreate-btn'>Recreate</button>
            <button id='clear-btn'>Clear</button> -->
        </div>
    
        <script src="/javascripts/vendor/jquery.js"></script>
        <script src="/javascripts/jBox.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore.js"></script>
        <script src="https://cdn.socket.io/socket.io-1.3.5.js"></script>
        <script>
            $(document).ready(function() {
                //TBD: Fully working sample, to be implemented when v1 is done
                /*//Real-time user interface
                var test_box;

                $(document).ready(function() {
                    console.log( "ready!" );
                    test_box = $('#clear-btn').jBox('Tooltip', {
                        target: $('#clear-btn'),
                        content: 'TESSTETST'
                    });
                });

                var updateMouse = true;
                var i = setInterval(function() {
                    //console.log('test');

                    var currentElement = $('#board-container td:hover')[0];
                    //$('#board-container td[cx="3"][cy="3"]')[0]
                    if (currentElement) {
                        var selfPosition = {cx: currentElement.getAttribute('cx'), cy: currentElement.getAttribute('cy'), name: 'self', color: 'red'};
                        test_box.target = $('#board-container td[cx="' + selfPosition.cx + '"][cy="' + selfPosition.cy + '"]');
                        test_box.open();
                        console.log(selfPosition);
                    } else {
                        test_box.close();
                        console.log('no position');
                    }

                    if (!updateMouse) { clearInterval(i); }
                }, 500);*/


                //Socket functions
                //var binaryMode = true; //TBD
                var socket = io.connect('http://localhost:8998'),
                    patternSize = 9,
                    pattern;

                //Create the drawing pattern array
                function clearPatternArray() {
                    pattern = new Array(patternSize);

                    for (var i = 0; i < pattern.length; i++) {
                        pattern[i] = new Array(patternSize);
                        for (var k = 0; k < pattern.length; k++) {
                            pattern[i][k] = 0;
                        }
                    }
                }
                clearPatternArray();

                //On user connected
                socket.on('connect', function () {
                    //console.log('connect');


                    socket.on('stat-conn', function (data) {
                        $('#stat-conn').html(data);
                    });

                    socket.on('room details', function (data) {
                        var list = $('#user-list');
                        list.html('');
                        data.forEach(function (item) {
                            console.log(item);
                            list.append('<li>' + item + '</li>');
                        });
                    });

                    //Update from server
                    socket.on('board update', function (data) {
                        
                        var t0 = performance.now();
                        
                        var str = JSON.stringify(data).replace(/0/g, '□').replace(/1/g, '■').replace(/,/g, '').replace(/\]/g, '\n').replace(/\[/g, '');
                        //$('body').html(str); //Not used yet, ENH: Make a JSON version
                        $('#array-container').html(str); //Not used yet, ENH: Make a JSON version
                        
                        //The following code is too slow (about 600ms for setAttribute and 800ms for innerText)
                        /*for (x = 0; x < data.length; x++) {
                            for (y = 0; y < (data[x]).length; y++) {
                                //console.log(data[x][y]);
                                var item = ($($('#board-container tr')[x]).find('td')[y]);
                                if (data[x][y] >= 1) {
                                    //Binary mode TBD
                                    //if (binaryMode) {
                                    //    item.innerText = '1';
                                    //} else {
                                        item.setAttribute('class', 'alive');
                                    //}
                                } else {
                                    //Binary mode TBD
                                    //if (binaryMode) {
                                    //    item.innerText = '0';
                                    //} else {
                                        item.removeAttribute('class');
                                    //}
                                }
                            }
                        }*/
                        
                        var t1 = performance.now();
                        console.log("Process took " + (t1 - t0) + " milliseconds.");
                    });

                    //Draw on the board
                    $('#board-container td').click(function cellClick() {
                        var el = $(this);
                        var coordinates = {x: el.attr('cx'), y: el.attr('cy'), cells: pattern}
                        console.log("board: ", coordinates);
                        socket.emit('draw', coordinates);
                    });

                    //Draw on cell editor
                    $('#cell-editor td').click(function cellClick() {
                        var el = $(this), x, y;

                        $(el).toggleClass('alive');
                        clearPatternArray();
                        $('#cell-editor td.alive').each(function() {
                            pattern[$(this).attr('cy')][$(this).attr('cx')] = ($(this).hasClass('alive') * 1);
                        });
                        //console.dir(pattern);
                    });

                    var nicknameTimer = null;
                    $('#nickname').on('keyup', function () {
                        if (nicknameTimer) {
                            clearTimeout(nicknameTimer); //cancel the previous timer.
                            nicknameTimer = null;
                        }
                        nicknameTimer = setTimeout(function() {
                            socket.emit('nickname change', $('#nickname').val());
                        }, 1000);
                    });

                    
                    /*$( "#array-container" ).mousemove(function( event ) {
                      var msg = "Handler for .mousemove() called at ";
                      msg += event.pageX + ", " + event.pageY;
                      console.log(msg);
                    });*/

                    $( "#array-container" ).click(function( event ) {
                        /*var msg = "Handler for .mousemove() called at ";
                        msg += event.pageX + ", " + event.pageY;
                        console.log(msg);*/

                        var coordX = Math.round((event.pageX - 260) / 15);
                        var coordY = Math.round((event.pageY - 60) / 15);
                        var drawInfo = {x: coordX, y: coordY, cells: pattern};
                        console.log(drawInfo);
                        socket.emit('draw', drawInfo);
                    });

                    //FIX: Change this for a method that reads a variable
                    $('#cell-editor td[cx="4"][cy="4"]').addClass('alive');
                    $('#cell-editor td[cx="4"][cy="3"]').addClass('alive');
                    $('#cell-editor td[cx="4"][cy="5"]').addClass('alive');
                    $('#cell-editor td[cx="3"][cy="4"]').addClass('alive');
                    $('#cell-editor td[cx="5"][cy="4"]').addClass('alive');
                    pattern[4][4] = 1;
                    pattern[4][3] = 1;
                    pattern[4][5] = 1;
                    pattern[3][4] = 1;
                    pattern[5][4] = 1;
                });
            });
        </script>
    </body>
</html>
